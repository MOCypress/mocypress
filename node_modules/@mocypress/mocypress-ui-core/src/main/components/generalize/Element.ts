import {BaseElement} from "./BaseElement";
import {Method} from "./Method";
import {Clickable} from "../../behaviours/Clickable";

/**
 * A library for building mocypress-ui-core dependency lib
 *
 * @remarks
 * The mocypress-ui-core defines the {@link BaseElement} interface and {@link Element} class,
 * which are used to build element common actions
 *
 * @packageDocumentation
 */

/**
 * Class implemented by all element action types.
 * @public
 */
export class Element implements BaseElement{

    private _locator: string;
    private _method: Method;

    constructor(locator: string, method: Method) {
        this._locator = locator;
        this._method = method;
    }

    /**
     * Get the value of the given attribute of the element. Will return the current value, even if this has been modified after the page has been loaded.
     * More exactly, this method will return the value of the property with the given name, if it exists. If it does not, then the value of the attribute with the given name is returned. If neither exists, null is returned.
     *
     * @param The name of the attribute.
     * @return The attribute/property's current value or null if the value is not set.
     */
    getAttribute(attribute: string): string {
        return "";
    }

    /**
     * Get the value of a given CSS property. Color values should be returned as rgba strings, so, for example if the "background-color" property is set as "green" in the HTML source, the returned value will be "rgba(0, 255, 0, 1)". Note that shorthand CSS properties (e.g. background, font, border, border-top, margin, margin-top, padding, padding-top, list-style, outline, pause, cue) are not returned, in accordance with the DOM CSS2 specification - you should directly access the longhand properties (e.g. background-color) to access the desired values.
     *
     * @param PropertyName - the css property name of the element
     * @return The current, computed value of the property.
     */
    getCssValue(attribute: string): string {
        return "";
    }

    /**
     * Where on the page is the top left-hand corner of the rendered element?
     *
     * @return A point, containing the location of the top left-hand corner of the element
     */
    getLocation(): any {
    }

    /**
     * What is the width and height of the rendered element?
     *
     * @return The size of the element on the page.
     */
    getSize(): any {
    }

    /**
     * Get the tag name of this element. Not the value of the name attribute: will return "input" for the element <input name="foo" />.
     *
     * @return The tag name of this element.
     */
    getTagName(): string {
        return "";
    }

    /**
     * Get the visible (i.e. not hidden by CSS) text of this element, including sub-elements.
     *
     * @return The visible text of this element.
     */
    getText(): string {
        return "";
    }

    /**
     * Is this element displayed or not? This method avoids the problem of having to parse an element's "style" attribute.
     *
     * @return Whether or not the element is displayed
     */
    isDisplayed(): boolean {
        return false;
    }

    /**
     * Is the element currently enabled or not? This will generally return true for everything but disabled input elements.
     *
     * @return True if the element is enabled, false otherwise.
     */
    isEnabled(): boolean {
        return false;
    }

    /**
     * Determine whether or not this element is selected or not. This operation only applies to input elements such as checkboxes, options in a select and radio buttons. For more information on which elements this method supports, refer to the specification.
     *
     * @return True if the element is currently selected or checked, false otherwise.
     */
    isSelected(): boolean {
        return false;
    }


}
